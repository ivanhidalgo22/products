// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sample.Marketplace.Products.Persistence.DbContext;

#nullable disable

namespace Sample.Marketplace.Products.Persistence.Migrations
{
    [DbContext(typeof(ProductsDbContext))]
    [Migration("20230521212855_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Sample.Marketplace.Domain.Entities.Features.Product.SkuPricing", b =>
                {
                    b.Property<string>("SkuId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("longtext");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("longtext");

                    b.Property<decimal>("ErpPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("SkuId", "Country");

                    b.ToTable("SkuPricing");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.Availability", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CatalogItemId")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<string>("DefaultCurrency")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPurchasable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRenewable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProductId")
                        .HasColumnType("longtext");

                    b.Property<string>("Segment")
                        .HasColumnType("longtext");

                    b.Property<string>("SkuId")
                        .HasColumnType("longtext");

                    b.Property<string>("Term")
                        .HasColumnType("longtext");

                    b.Property<string>("TermNavigationDescription")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TermNavigationDescription");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.BillingCycleType", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.HasKey("Value");

                    b.ToTable("BillingCycleTypes");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductTypeId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("PublisherName")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.ProductType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("SubType")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = "Azure",
                            DisplayName = "Azure"
                        },
                        new
                        {
                            Id = "OnlineServices",
                            DisplayName = "OnlineServices"
                        });
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.Sku", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Billing")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingType")
                        .HasColumnType("longtext");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("HasAddOns")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAddon")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAutoRenewable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsTrial")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<string>("Locate")
                        .HasColumnType("longtext");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext");

                    b.Property<int?>("MaximumQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ParentId")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Term")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Sku");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.SkuBillingCycle", b =>
                {
                    b.Property<string>("SkuId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BillingCycleId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SkuProductId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("SkuId", "BillingCycleId", "ProductId");

                    b.HasIndex("BillingCycleId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SkuId", "SkuProductId");

                    b.ToTable("SkuBillingCycles");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.Term", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Duration")
                        .HasColumnType("longtext");

                    b.HasKey("Description");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.Availability", b =>
                {
                    b.HasOne("Sample.Marketplace.Products.Domain.Entities.Features.Product.Term", "TermNavigation")
                        .WithMany("Availabilities")
                        .HasForeignKey("TermNavigationDescription");

                    b.Navigation("TermNavigation");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.Product", b =>
                {
                    b.HasOne("Sample.Marketplace.Products.Domain.Entities.Features.Product.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId");

                    b.HasOne("Sample.Marketplace.Products.Domain.Entities.Features.Product.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.Navigation("ProductType");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.Sku", b =>
                {
                    b.HasOne("Sample.Marketplace.Products.Domain.Entities.Features.Product.Product", "Product")
                        .WithMany("Skus")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.SkuBillingCycle", b =>
                {
                    b.HasOne("Sample.Marketplace.Products.Domain.Entities.Features.Product.BillingCycleType", "BillingCycle")
                        .WithMany("SkuBillingCycle")
                        .HasForeignKey("BillingCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sample.Marketplace.Products.Domain.Entities.Features.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sample.Marketplace.Products.Domain.Entities.Features.Product.Sku", "Sku")
                        .WithMany("SkuBillingCycle")
                        .HasForeignKey("SkuId", "SkuProductId");

                    b.Navigation("BillingCycle");

                    b.Navigation("Product");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.BillingCycleType", b =>
                {
                    b.Navigation("SkuBillingCycle");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.Product", b =>
                {
                    b.Navigation("Skus");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.Sku", b =>
                {
                    b.Navigation("SkuBillingCycle");
                });

            modelBuilder.Entity("Sample.Marketplace.Products.Domain.Entities.Features.Product.Term", b =>
                {
                    b.Navigation("Availabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
